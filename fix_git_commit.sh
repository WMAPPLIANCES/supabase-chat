#!/bin/bash

echo "üîß Script de Diagn√≥stico e Corre√ß√£o do Git - WM Appliances"
echo "============================================================"

# Fun√ß√£o para verificar se um comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Verificar se git est√° instalado
echo "1. Verificando se git est√° instalado..."
if command_exists git; then
    echo "‚úÖ Git est√° instalado: $(git --version)"
else
    echo "‚ùå Git n√£o est√° instalado. Instalando..."
    apt-get update && apt-get install -y git
fi

# Verificar diret√≥rio atual
echo ""
echo "2. Verificando diret√≥rio atual..."
echo "üìÅ Diret√≥rio: $(pwd)"
echo "üìã Arquivos:"
ls -la

# Verificar se √© um reposit√≥rio git
echo ""
echo "3. Verificando status do reposit√≥rio..."
if [ -d ".git" ]; then
    echo "‚úÖ Reposit√≥rio git j√° existe"
    git status
else
    echo "‚ùå N√£o √© um reposit√≥rio git. Inicializando..."
    git init
    echo "‚úÖ Reposit√≥rio git inicializado"
fi

# Configurar git com o email correto
echo ""
echo "4. Configurando git com email correto..."
git config --global user.name "WM Appliances" 2>/dev/null || echo "‚ùå Erro ao configurar nome"
git config --global user.email "support@wmappliances.net" 2>/dev/null || echo "‚ùå Erro ao configurar email"
echo "‚úÖ Git configurado com email: support@wmappliances.net"

# Verificar configura√ß√£o atual
echo ""
echo "üìß Configura√ß√£o atual do git:"
echo "Nome: $(git config user.name)"
echo "Email: $(git config user.email)"

# Verificar arquivos para commit
echo ""
echo "5. Verificando arquivos para commit..."
if [ -f "README.md" ]; then echo "‚úÖ README.md encontrado"; else echo "‚ùå README.md n√£o encontrado"; fi
if [ -f "docker-compose.yml" ]; then echo "‚úÖ docker-compose.yml encontrado"; else echo "‚ùå docker-compose.yml n√£o encontrado"; fi
if [ -f "env.example" ]; then echo "‚úÖ env.example encontrado"; else echo "‚ùå env.example n√£o encontrado"; fi
if [ -f ".gitignore" ]; then echo "‚úÖ .gitignore encontrado"; else echo "‚ùå .gitignore n√£o encontrado"; fi
if [ -f "reset.sh" ]; then echo "‚úÖ reset.sh encontrado"; else echo "‚ùå reset.sh n√£o encontrado"; fi

# Adicionar arquivos ao git
echo ""
echo "6. Adicionando arquivos ao git..."
git add . 2>/dev/null || echo "‚ùå Erro ao adicionar arquivos"
echo "‚úÖ Arquivos adicionados"

# Verificar status
echo ""
echo "7. Status do git:"
git status

# Fazer commit
echo ""
echo "8. Fazendo commit..."
git commit -m "üöÄ Deploy inicial do Supabase Self-Hosted - WM Appliances

Configura√ß√£o completa do Supabase self-hosted para WM Appliances:
- Docker Compose com todos os servi√ßos
- Configura√ß√µes de seguran√ßa personalizadas  
- Integra√ß√£o com dom√≠nio selfapi.wmappliances.cloud
- Scripts de automa√ß√£o e documenta√ß√£o completa

Pronto para integra√ß√£o com Chatwoot!" 2>/dev/null || echo "‚ùå Erro no commit"

echo "‚úÖ Commit realizado"

# Verificar se h√° reposit√≥rio remoto
echo ""
echo "9. Verificando reposit√≥rio remoto..."
git remote -v 2>/dev/null || echo "‚ùå Nenhum reposit√≥rio remoto configurado"

echo ""
echo "üéØ Pr√≥ximos passos:"
echo "1. Crie o reposit√≥rio no GitHub: https://github.com/WMAPPLIANCES/supabase-selfhosted"
echo "2. Execute: git remote add origin https://github.com/WMAPPLIANCES/supabase-selfhosted.git"
echo "3. Execute: git branch -M main"
echo "4. Execute: git push -u origin main"

echo ""
echo "‚úÖ Diagn√≥stico conclu√≠do!" 